3;5;a <- 7; b <- a; c<-a+b;
3;5;e<-f + g
a<-c(4,5,6,7,8,10,11)
b<-a[length(a):1]
c<-a+b
d <- a * b
c;d
dit <- d[2:4]
b	+	dit
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
smurfenlied
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/Test.R')
smurfenlied
smurfenlied
smurfenlied
smurfenlied
>rep(
rep(
help(rep)
)
help("replications")
help(rep)
>?rep
?replications
?rep
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/basicScriptLab1.R')
index <- rep(c("A","B"),length(int)/2)
indexAlt <- c(rep("nee",length(int)/2),rep("ja",length(int)/2))
source('C:/Users/sabdo/Google Drive/Universiteit/Methoden en Statistiek/R/Ass1/basicScriptLab1.R')
setwd("C:\\Users\\sabdo\\Google Drive\\Universiteit\\Methoden en Statistiek\\R\\Ass3")     ## Set working directory
resultTable <- read.csv("participant7data.csv",header = TRUE,sep="")                       ## Lees csv file in
### 4.1A
### -- Code van assignment 2 -- ###
### Resultaten zijn anders vergeleken met vorige week, de punten lopen anders (hebben een soort dip)
colnames(resultTable)
resultTable[1:5,]
head(resultTable)
levels(resultTable$partOfExperiment)  ## Checkt de levels van eeen stuk data
summary(resultTable$CurrentTime) ## Maakt een samenvatting van data, geeft mediaan, mean, 1st,3rd quartile etc
unique(resultTable$CurrentTime)  ## geeft unieke waarden terug
## Dingen om te testen
summary(resultTable$LocalTime)
levels(resultTable$partOfExperiment)
levels(resultTable$scrabbleWindowVisible)
levels(resultTable$scrabbleCondition)
summary(resultTable$nrCorrectScrabbleWords)
summary(resultTable$Eventmessage1)
summary(resultTable$Eventmessage2)
########
#A. LocalTime               --   ratio     --  de werkelijke tijd
#B. partOfExperiment        --   nominal   --  de fase van het experiment waarin iemand zit
#C. scrabbleWindowVisible   --   binary    --  of de window van scrabble zichtbaar is of niet (false/true)
#D. scrabbleCondition       --   ordinal   --  Moeilijkheidsgraad van scrabble
#E. nrCorrectScrabbleWords  --   ratio     --  Aantal juiste woorden in scrabble
#F. Eventmessage1           --   nominal   --  Verschillende events kunnen voorkomen
#G. Eventmessage2           --   nominal   --  40 verschillende soorten levels, een message (letter, wat er getypt wordt, en return of het woord juist is)
########
str(resultTable)
with(resultTable[resultTable$partOfExperiment == "practiceDualTask" & resultTable$LocalTime <= 150,],summary(LocalTime)) ##
resultTable[494:497,]
#4.1B
resultTable[resultTable$partOfExperiment == "practiceTyping", ]
#
# analysis single task typing
#
pracType <- resultTable[resultTable$partOfExperiment == "practiceTyping", ]
require(gdata)
pracType2 <- drop.levels(pracType)
## Check verschil in levels in practype en practype 2
unique(levels(pracType$Eventmessage1))
unique(levels(pracType2$Eventmessage1))
## Check aantal goede en foute keypresses
summary(pracType2$Eventmessage1 == "keypress")        ## 291 goede kepyresses
summary(pracType2$Eventmessage1 == "wrongKeypress")   ## 4 foute keypresss
#
# analysis voor waar juiste keypresses zijn en de tijd tussen 0 en 150 valt
#
pracType3 <- pracType2[pracType2$Eventmessage1 == "keypress" & pracType2$LocalTime > 0 & pracType2$LocalTime < 150,]
x<-nrow(pracType2[pracType2$Eventmessage1 == "keypress",])+nrow(pracType2[pracType2$Eventmessage1 == "wrongKeypress",])
IKIcorrect<-(150/nrow(pracType3[pracType3$Eventmessage1 == "keypress",])) ## Gemiddeld correcte toetsen 0.51
IKIincorrect<-(150/x)                                                     ## Incorrect 0.5084
ikisCorrectOnly <-  with(pracType2[pracType2$Eventmessage1=="keypress" ,],diff(c(0,LocalTime)))
ikisCorrectAndIncorrect <-  with(pracType2[pracType2$Eventmessage1=="keypress" | pracType2$Eventmessage1=="wrongKeypress" ,],diff(c(0,LocalTime)))
summary(ikisCorrectOnly) ## Verschilt van ons uitgerekende -- 0.5154 vs 0.5147
summary(ikisCorrectAndIncorrect) ## Verschilt van ons uitgerekende -- 0.5084 vs 0.5078
## -- Sort() sorteert de waardes in een dataset
sort(ikisCorrectOnly)
sort(ikisCorrectAndIncorrect)
allikis <- c(ikisCorrectOnly, ikisCorrectAndIncorrect)
labels <- c(rep("onlyCorrectAnalyzed",length(ikisCorrectOnly)),rep("CorrectAndIncorrectAnalyzed",length(ikisCorrectAndIncorrect)))
frameIkis <- data.frame(allikis,labels)
with(frameIkis,plot(allikis~labels,xlab="Category",ylab="Interkeypress interval",col="grey"))
#
# Analysis Scrabble Task
#
tableScrabbleTask <- NA
tableScrabbleTask<-resultTable[resultTable$partOfExperiment == "practiceScrabble",]
tableScrabbleTask2<- drop.levels(tableScrabbleTask)
summary(tableScrabbleTask$Eventmessage1)
sort(summary(tableScrabbleTask2$Eventmessage2[tableScrabbleTask2$Eventmessage1 =="keypressScrabble"]))
#
# Unique, correct words:
#
woordenscrabble <- tableScrabbleTask[tableScrabbleTask$Eventmessage2 == "correctNewWord",]$currentScrabbleLettersTyped
unique(woordenscrabble)
tableScrabbleTask3 <- tableScrabbleTask2[tableScrabbleTask2$LocalTime < 150,]
tableScrabbleTask4 <- tableScrabbleTask3[tableScrabbleTask3$Eventmessage2 == "correctNewWord",]
#
#
#
######## -- CODE FOR SECTION 4.1 --- ######
#
#
#
#windows(width=8,height=4)  ## for windows use: windows() (unless you use Rstudio)
##quartz(width=8,height=4)		  ## for mac use: quartz() (unless you use Rstudio)
## Aangepast om te comparen met Payne's plot -- axes naar 600 en 35 verzet
## Vergelijking:
## Onze grafiek loopt steiler, vergeleken met die van Payne, en er worden in een interval van (0,200) meer woorden gevonden dan in Payne's plot
## Wel is er sprake van verminderde opbrengst
par(mfrow=c(1,2))
## simple plot
with(tableScrabbleTask3,plot(LocalTime ,nrCorrectScrabbleWords,xlab="Time (s)",ylab="Number words",main="Simple plot",xlim=c(0,600),ylim=c(0,35)))
## complex plot in which I have influenced what values are shown on the x- and y-axes
with(tableScrabbleTask4,plot(LocalTime ,nrCorrectScrabbleWords,ann=FALSE,xaxt="n",yaxt="n",xlim=c(0,600),ylim=c(0,35)))
mtext(side=1,"Time (s)",line=2)  ## provide axis label at specific location and distance (and potentially: with specific font size)
mtext(side=2,"Number words",line=2)
mtext(side=3,"Pretty plot",line=2,cex=1.5)
axis(side=1,at=seq(0,600,50),labels=rep("",length(seq(0,600,50))))
axis(side=1,at=seq(0,600,150),labels=seq(0,600,150),lwd.ticks=2)  ## thick markers
axis(side=2,at=seq(0,35,1),labels=rep("",length(seq(0,35,1))))
axis(side=2,at=seq(0,35,5),labels=seq(0,35,5),lwd.ticks=2)  ## thick markers
points(PayneTable$time, PayneTable$EasyWords, pch = 19, col ="red" )
points(PayneTable$time, PayneTable$DifficultWords, pch = 19, col ="blue")
legend("topleft", legend=c("Easy Words", "Difficult Words"),
col=c("red", "blue"), lty=1, cex=0.8,
box.lty=2, box.lwd=2, box.col="green")
###### Code that you need for a later assignment:
### compare to Payne's data
time <- seq(1,600,6)  ## time steps of 6 seconds
PayneTable <- data.frame(time = time)
PayneTable $unit <- PayneTable $time / 6
PayneTable $wordsPerUnitEasy <-  0.65* 0.981^(PayneTable $unit-1)
PayneTable $wordsPerUnitDifficult <-   0.51* 0.965^(PayneTable $unit-1)
PayneTable $EasyWords <- cumsum(PayneTable $wordsPerUnitEasy)
PayneTable $DifficultWords <- cumsum(PayneTable $wordsPerUnitDifficult)
?points()
### use this data frame to add this data to earlier plots (see assignment)
############# Start Assignment 3 ###############
setwd("C:\\Users\\sabdo\\Google Drive\\Universiteit\\Methoden en Statistiek\\R\\Ass3")     ## Set working directory
resultTable <- read.csv("participant7data.csv",header = TRUE,sep="")                       ## Lees csv file in
####### 4.1.B ######
load("allData2018.Rdata") ## Load allData2018
allData[1:3,]   ## Testen of alldata werkt
unique(allData$SubjectNr) ## Check alle unieke subjectnumbers in alldata
### 1. Independent variable: De set letters; levels easy and hard
### 2. Dependent variable: Het aantal gegenereerde woorden
### 3. H0: Er is geen significant verschil tussen de twee verschillende experimenten
###    H1: Er is wel een significant verschil tussen de twee verschillende experimenten
#
# Analysis of total scrabble words
#
#per proef per con per trial
dualTask<-allData[allData$partOfExperiment=="dualTask",]
dualTask<-droplevels(dualTask)
#bij trial stop too much time willen we number of scrabble words given
allDataEndOfTrialsDualTaskOnly<-aggregate(dualTask$nrCorrectScrabbleWords, by = list(dualTask$SubjectNr, dualTask$scrabbleCondition, dualTask$TrialNumber), FUN=max)
summary(allDataEndOfTrialsDualTaskOnly)
averageNrScrabbleWords<-aggregate(allDataEndOfTrialsDualTaskOnly$x, by = list(allDataEndOfTrialsDualTaskOnly$Group.1,allDataEndOfTrialsDualTaskOnly$Group.2), FUN=mean)
colnames(averageNrScrabbleWords)[1]<- "subjectNr"
colnames(averageNrScrabbleWords)[2]<- "difficulty"
colnames(averageNrScrabbleWords)[3]<- "mean"
boxplot(mean ~ difficulty, data=averageNrScrabbleWords)
averageNrScrabbleWords2<-droplevels(averageNrScrabbleWords[averageNrScrabbleWords$difficulty!="neutral",])
boxplot(mean ~ difficulty, data=averageNrScrabbleWords2, ylab = "Avg correct words", ylim=c(0,25))
averageEasy<-mean(averageNrScrabbleWords2[averageNrScrabbleWords2$difficulty=="easy",]$mean)
averageHard<-mean(averageNrScrabbleWords2[averageNrScrabbleWords2$difficulty=="hard",]$mean)
barplot(c(averageEasy, averageHard), names.arg = c("easy", "hard"))
#### TYPE SUBJECT DESIGN: WITHIN-SUBJECT DESIGN
source("usefulFunctions.R")
summaryScrabble <- summarySEwithin(averageNrScrabbleWords2, measurevar="mean", withinvars=c("difficulty"))
print(summaryScrabble)
par(mfrow=c(1,3))
errorBars <- function(means,errors,title="",ylabel="", xlabel="",ylimitation=c(min(means)-min(means)/10,max(means)+max(means/10)),color="grey",spaceBesidesBar=0.2)
{
plt <- barplot(means,ylim=ylimitation,main=title, ylab=ylabel, xlab=xlabel,col= color,space=spaceBesidesBar) #the basic barplot
yv <- as.vector(means)
errors <- as.vector(errors)
g <- (max(plt)-min(plt))/50
for (i in 1:length(plt))
{
lines(c(plt[i],plt[i]),c(yv[i]+errors[i],yv[i]-errors[i]))
lines(c(plt[i]-g,plt[i]+g),c(yv[i]+errors[i],yv[i]+errors[i]))
lines(c(plt[i]-g,plt[i]+g),c(yv[i]-errors[i],yv[i]-errors[i]))
}
}
require(cowplot)
#plot 1: mean with sd as error bars
errorBars(summaryScrabble$mean, summaryScrabble$sd, xlabel = "Standard Deviation", ylabel = "average", ylimitation = c(0,20))
#plot 2: mean with se as error bars
errorBars(summaryScrabble$mean, summaryScrabble$se, xlabel = "Standardized Error", ylabel = "average", ylimitation = c(0,20))
#plot 3: mean with 95% Confidence Interval as error bars
errorBars(summaryScrabble$mean, summaryScrabble$ci, xlabel = "95% Confidence Interval", ylabel = "average", ylimitation = c(0,15), col=c("LightBlue", "red"))
legend("topleft", legend=c("Easy", "Hard"), fill = c("Lightblue", "Red"),  cex = 1)
# The two conditions differ, which is in line with our hypthesis.
### Step 4
summaryScrabble$lower <- summaryScrabble$mean - summaryScrabble$ci
summaryScrabble$upper <- summaryScrabble$mean + summaryScrabble$ci
### Step 5
with(averageNrScrabbleWords2,t.test(mean~ difficulty,paired=TRUE))
#
#
#
#
#
### NEW Analysis -- AVERAGE SCORE
#
#
#
#
#per proef per con per trial
dualTask<-allData[allData$partOfExperiment=="dualTask",]
dualTask<-droplevels(dualTask)
#bij trial stop too much time willen we number of scrabble words given
allDataEndOfTrialsDualTaskOnly2<-aggregate(dualTask$CurrentScore, by = list(dualTask$SubjectNr, dualTask$scrabbleCondition, dualTask$TrialNumber), FUN=max)
summary(allDataEndOfTrialsDualTaskOnly2)
averageScore<-aggregate(allDataEndOfTrialsDualTaskOnly2$x, by = list(allDataEndOfTrialsDualTaskOnly2$Group.1,allDataEndOfTrialsDualTaskOnly2$Group.2), FUN=max)
colnames(averageScore)[1]<- "subjectNr"
colnames(averageScore)[2]<- "difficulty"
colnames(averageScore)[3]<- "mean"
boxplot(mean ~ difficulty, data=averageScore)
averageScore2<-droplevels(averageScore[averageScore$difficulty!="neutral",])
boxplot(mean ~ difficulty, data=averageScore2, ylab = "Avg scores", ylim=c(200, 800))
averageEasy2<-mean(averageScore2[averageScore$difficulty=="easy",]$mean)
averageHard2<-mean(averageScore2[averageScore$difficulty=="hard",]$mean)
barplot(c(averageEasy2, averageHard2), names.arg = c("easy", "hard"))
source("usefulFunctions.R")
summaryScrabble2 <-summarySEwithin(averageScore2, measurevar="mean", withinvars=c("difficulty"))
print(summaryScrabble2)
# N:	The	number	of observations	(in	our	case:	number	participants	that	did	the	condition)
# x:	the average score	of	the	independent	variable	for	that	condition
# x_norm:	a	score	that	normalizes x	(not relevant for	now)
# sd:	the standard	deviation
# se:	the standardized	error of	the	mean
# ci:	the 95%	confidence	intervals
errorBars <- function(means,errors,title="",ylabel="", xlabel="",ylimitation=c(min(means)-min(means)/10,max(means)+max(means/10)),color="grey",spaceBesidesBar=0.2)
{
plt <- barplot(means,ylim=ylimitation,main=title, ylab=ylabel, xlab=xlabel,col= color,space=spaceBesidesBar) #the basic barplot
yv <- as.vector(means)
errors <- as.vector(errors)
g <- (max(plt)-min(plt))/50
for (i in 1:length(plt))
{
lines(c(plt[i],plt[i]),c(yv[i]+errors[i],yv[i]-errors[i]))
lines(c(plt[i]-g,plt[i]+g),c(yv[i]+errors[i],yv[i]+errors[i]))
lines(c(plt[i]-g,plt[i]+g),c(yv[i]-errors[i],yv[i]-errors[i]))
}
}
windows()
par(mfrow=c(1,3))
errorBars(summaryScrabble2$mean, summaryScrabble2$sd, xlabel = "Standard Deviation", ylabel = "Score", ylimitation = c(0,800))
errorBars(summaryScrabble2$mean, summaryScrabble2$se, xlabel = "Standard Error", ylabel = "Score", ylimitation = c(0,800))
errorBars(summaryScrabble2$mean, summaryScrabble2$ci, xlabel = "Confidence Interval", ylabel = "Score", ylimitation = c(0,800))
summaryScrabble2$lower<-summaryScrabble2$mean - summaryScrabble2$ci ; summaryScrabble2$upper<-summaryScrabble2$mean + summaryScrabble2$ci
with(averageScore2,t.test(mean~ difficulty,paired=TRUE))
par(mfrow=c(1,3))
errorBars(summaryScrabble2$mean, summaryScrabble2$ci, xlabel = "95% Confidence Interval", ylabel = "average score", ylimitation = c(0,650), col=c("LightBlue", "red"))
legend("topleft", legend=c("Easy", "Hard"), fill = c("Lightblue", "Red"),  cex = 1)
View(allData)
setwd("C:\\Users\\sabdo\\Google Drive\\Universiteit\\Methoden en Statistiek\\R\\Final Assignment")     ## Set working directory
resultTable <- read.csv("AllData.RData",header = TRUE,sep="")                       ## Lees csv file in
load("AllData.RData")
setwd("C:\\Users\\sabdo\\Google Drive\\Universiteit\\Methoden en Statistiek\\R\\Final Assignment")     ## Set working directory
load("AllData.RData")
View(allData)
AllData$SubjectNr
allData$SubjectNr
allData$[SubjectNr == 1]
allData$SubjectNr = 1
setwd("C:\\Users\\sabdo\\Google Drive\\Universiteit\\Methoden en Statistiek\\R\\Final Assignment")     ## Set working directory
load("AllData.RData")
allData[1.]
allData[1,]
allData[2,]
allData[allData$SubjectNr=1,]
allData[allData$SubjectNr,]
curve(1.15^-x * 8 + 2, from=1, to = 20, n= 1, xlab="Aantal Woorden", ylab="Giving Up Time (S)")
curve(1.15^-x * 8 + 2, from=1, to = 20, n= 1, xlab="Aantal Woorden", ylab="Giving Up Time (S)")
curve(1.15^-x * 8 + 2, from=1, to = 20, n= 1, xlab="Aantal Woorden", ylab="Giving Up Time (S)", col = "blue", lwd=2)
curve(1.15^{-x} * 8 + 2, from=1, to = 20, n= 1, xlab="Aantal Woorden", ylab="Giving Up Time (S)", col = "blue", lwd=2)
allData[allData$SubjectNr == 1, ]
allData[allData$SubjectNr == 1, ]$CurrentTime
View(allData)
allData[allData$SubjectNr == var && allData$partOfExperiment == "dualTask", ]$CurrentTime
allData[allData$SubjectNr == var & allData$partOfExperiment == "dualTask", ]$CurrentTime
allData[allData$SubjectNr == 1 & allData$partOfExperiment == "dualTask", ]$CurrentTime
allData[allData$SubjectNr == 1 && allData$partOfExperiment == "dualTask", ]$CurrentTime
start_experiment <- allData[allData$SubjectNr == 1 & allData$partOfExperiment == "dualTask", ]$CurrentTime[1]
start_experiment <- allData[allData$SubjectNr == 1 & allData$partOfExperiment == "dualTask" & allData$Eventmessage11 == "trialstart", ]$CurrentTime
start_experiment <- allData[allData$SubjectNr == 1 & allData$partOfExperiment == "dualTask" & allData$Eventmessage11 == "trialStart", ]$CurrentTime
start_experiment <- allData[allData$SubjectNr == 1 & allData$partOfExperiment == "dualTask" & allData$Eventmessage1 == "trialStart", ]$CurrentTime
start_experiment <- allData[allData$SubjectNr == 1 & allData$partOfExperiment == "dualTask" & allData$Eventmessage1 == "trialStart", ]$CurrentTime[1]
leave_experiment <- allData[allData$SubjectNr == 1 & allData$partOfExperiment == "dualTask" & allData$Eventmessage1 == "SwitchWindow", ]$CurrentTime[1]
plot(motfun28, 0, 12)
motfun28 <- function(x){3*1.3^x + 50}
motfun14 <- function(x){6*1.3^x + 50}
motfun7  <- function(x){9*1.3^x + 50}
plot(motfun28, 0, 12)
plot(motfun28, 0, 12)
plot(motfun14, 0, 12, add=TRUE)
plot(motfun7,0,12, add=TRUE)
plot(0:12,motfun28(0:12), type = 'l', xlim = c(0,12), ylim = c(0,250), xlab = "Aantal woorden", ylab = "Motivatiepunten")
lines(0:12,motfun14(0:12), col = "green")
lines(0:12,motfun7(0:12), col = "red")
legend("topleft", legend=c("7", "14", "28"), fill = c("Black", "Green", "Red"),  cex = 1)
plot(0:12,motfun28(0:12), type = 'b', xlim = c(0,12), ylim = c(0,250), xlab = "Aantal woorden", ylab = "Motivatiepunten")
lines(0:12,motfun14(0:12), col = "green")
lines(0:12,motfun7(0:12), col = "red")
legend("topleft", legend=c("7", "14", "28"), fill = c("Black", "Green", "Red"),  cex = 1)
plot(0:12,motfun28(0:12), type = 'b', xlim = c(0,12), ylim = c(0,250), xlab = "Aantal woorden", ylab = "Motivatiepunten")
lines(0:12,motfun14(0:12), col = "green")
lines(0:12,motfun7(0:12), col = "red")
legend("topleft", legend=c("7", "14", "28"), fill = c("Black", "Green", "Red"),  cex = 1)
plot(0:12,motfun28(0:12), type = 'b', xlim = c(0,12), ylim = c(0,250), xlab = "Aantal woorden", ylab = "Motivatiepunten")
lines(0:12,motfun14(0:12),type = 'b', col = "green")
lines(0:12,motfun7(0:12),type = 'b', col = "red")
legend("topleft", legend=c("7", "14", "28"), fill = c("Black", "Green", "Red"),  cex = 1)
View(allData)
### Starttijd dualtask -- easy en hard voor subject 1
starttijd_dualtask_easy<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="easy"& allData$partOfExperiment == "dualTask" & allData$LengthOfUserLetterString == "0",]$CurrentTime[1])
starttijd_dualtask_hard<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="hard"& allData$partOfExperiment == "dualTask" & allData$LengthOfUserLetterString == "0",]$CurrentTime[1])
delete(leave_experiment)
remove(delete_experiment)
remove(leave_experiment)
remove(start_experiment)
#Dataset subject 1 in dualtask
Subject1data <- allData[allData$SubjectNr == "1" & allData$partOfExperiment == "dualTask",]
View(Subject1data)
setwd("C:\\Users\\sabdo\\Google Drive\\Universiteit\\Methoden en Statistiek\\R\\Final Assignment")     ## Set working directory
load("AllData.RData")
allData[allData$SubjectNr == 1 & allData$partOfExperiment == "dualTask", ]$CurrentTime
##
curve(1.15^{-x} * 8 + 2, from=1, to = 20, n= 1, xlab="Aantal Woorden", ylab="Giving Up Time (S)", col = "blue", lwd=2)
#
# Motivatiepunten functies
#
motfun28 <- function(x){3*1.3^x + 50}
motfun14 <- function(x){6*1.3^x + 50}
motfun7  <- function(x){9*1.3^x + 50}
### Grafiek Motivatie
plot(0:12,motfun28(0:12), type = 'b', xlim = c(0,12), ylim = c(0,250), xlab = "Aantal woorden", ylab = "Motivatiepunten")
lines(0:12,motfun14(0:12),type = 'b', col = "green")
lines(0:12,motfun7(0:12),type = 'b', col = "red")
legend("topleft", legend=c("7", "14", "28"), fill = c("Black", "Green", "Red"),  cex = 1)
#
#### Functies Give Up Time
#
#Dataset subject 1 in dualtask
Subject1data <- allData[allData$SubjectNr == "1" & allData$partOfExperiment == "dualTask",]
### Starttijd dualtask -- easy en hard voor subject 1
starttijd_dualtask_easy<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="easy"& allData$partOfExperiment == "dualTask" & allData$LengthOfUserLetterString == "0",]$CurrentTime[1])
starttijd_dualtask_hard<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="hard"& allData$partOfExperiment == "dualTask" & allData$LengthOfUserLetterString == "0",]$CurrentTime[1])
### Eindtijd dualtask -- easy en hard voor subject 1
eindtijd_dualtask_hard<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="hard"& allData$partOfExperiment == "dualTask" & allData$userStringLetterTask == "-10" & allData$Eventmessage1 = "OpeningLetter",]$CurrentTime[1])
### Eindtijd dualtask -- easy en hard voor subject 1
eindtijd_dualtask_hard<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="hard"& allData$partOfExperiment == "dualTask" & allData$userStringLetterTask == "-10" & allData$Eventmessage1 == "OpeningLetter",]$CurrentTime[1])
### Eindtijd dualtask -- easy en hard voor subject 1
eindtijd_dualtask_hard<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="hard"& allData$partOfExperiment == "dualTask" & allData$userStringLetterTask == "-10" & allData$Eventmessage1 == "OpeningLetter",]$CurrentTime)
### Eindtijd dualtask -- easy en hard voor subject 1
eindtijd_dualtask_hard<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="hard"& allData$partOfExperiment == "dualTask" & allData$userStringLetterTask == "-10" & allData$Eventmessage1 == "OpeningLetter",]$CurrentTime[1])
### Eindtijd dualtask -- easy en hard voor subject 1
eindtijd_dualtask_hard<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="hard"& allData$partOfExperiment == "dualTask" & allData$userStringLetterTask == "-10" & allData$Eventmessage2 == "OpeningLetter",]$CurrentTime[1])
eindtijd_dualtask_easy<-(allData[allData$SubjectNr == "1" &allData$scrabbleCondition=="easy"& allData$partOfExperiment == "dualTask" & allData$userStringLetterTask == "-10" & allData$Eventmessage2 == "OpeningLetter",]$CurrentTime[1])
GUT_hard <- eindtijd_dualtask_hard - starttijd_dualtask_hard
GUT_easy <- eindtijd_dualtask_easy - starttijd_dualtask_easy
### Total Time gebaseerd op vorige
TotalTime_hard <- eindtijd_dualtask_hard - starttijd_dualtask_hard
TotalTime_easy <- eindtijd_dualtask_easy - starttijd_dualtask_easy
remove(GUT_easy)
remove(GUT_hard)
